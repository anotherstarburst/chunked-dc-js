/*
** chunked-dc-js version 0.1.0 (2016-09-05).
**
** https://github.com/saltyrtc/chunked-dc-js
**
** Copyright (C) 2016 Threema GmbH / SaltyRTC Contributors
**
** Licensed under the Apache License, Version 2.0, <see LICENSE-APACHE file>
** or the MIT license <see LICENSE-MIT file>, at your option. This file may not be
** copied, modified, or distributed except according to those terms.
*/

(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.chunkedDc = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";const common_1=require("./common");class a{constructor(b,c,d){if(this.chunkId=0,1>d)throw new Error("Chunk size must be at least 1");if(1>c.byteLength)throw new Error("Array may not be empty");if(0>b||b>=Math.pow(2,32))throw new Error("Message id must be between 0 and 2**32-1");this.id=b,this.message=c,this.chunkSize=d}get hasNext(){const b=this.chunkId*this.chunkSize,c=this.message.byteLength-b;return 1<=c}next(){if(!this.hasNext)return{done:!0};const b=this.chunkId*this.chunkSize,c=this.message.byteLength-b,d=c<this.chunkSize?c:this.chunkSize,e=new DataView(new ArrayBuffer(d+common_1.Common.HEADER_LENGTH)),f=c>d?0:1,g=this.id,h=this.nextSerial();e.setUint8(0,f),e.setUint32(1,g),e.setUint32(5,h);for(let j=0;j<d;j++){const k=common_1.Common.HEADER_LENGTH+j;e.setUint8(k,this.message[b+j])}return{done:!1,value:new Uint8Array(e.buffer)}}nextSerial(){return this.chunkId++}[Symbol.iterator](){return this}}exports.Chunker=a;

},{"./common":2}],2:[function(require,module,exports){
"use strict";class a{}a.HEADER_LENGTH=9,exports.Common=a;

},{}],3:[function(require,module,exports){
"use strict";var chunker_1=require("./chunker");exports.Chunker=chunker_1.Chunker;var unchunker_1=require("./unchunker");exports.Unchunker=unchunker_1.Unchunker;

},{"./chunker":1,"./unchunker":4}],4:[function(require,module,exports){
"use strict";const common_1=require("./common");class c{constructor(d){if(d.byteLength<common_1.Common.HEADER_LENGTH)throw new Error("Invalid chunk: Too short");const e=new DataView(d),f=e.getUint8(0);this._endOfMessage=1==(1&f),this._id=e.getUint32(1),this._serial=e.getUint32(5),this._data=new Uint8Array(d.slice(common_1.Common.HEADER_LENGTH))}get isEndOfMessage(){return this._endOfMessage}get id(){return this._id}get serial(){return this._serial}get data(){return this._data}}exports.Chunk=c;class c{constructor(){this.messageLength=null,this.chunks=[],this.lastUpdate=new Date().getTime()}addChunk(d){this.hasSerial(d.serial)||(this.chunks.push(d),this.lastUpdate=new Date().getTime(),d.isEndOfMessage&&(this.endArrived=!0,this.messageLength=d.serial+1))}hasSerial(d){return this.chunks.find(e=>e.serial==d)!==void 0}get isComplete(){return this.endArrived&&this.chunks.length==this.messageLength}merge(){if(!this.isComplete)throw new Error("Not all chunks for this message have arrived yet.");this.chunks.sort((h,i)=>{if(h.serial<i.serial)return-1;return h.serial>i.serial?1:0});const d=this.chunks[0].data.byteLength*this.messageLength,e=new Uint8Array(new ArrayBuffer(d));let f=0,g=this.chunks[0].data.byteLength;for(let h of this.chunks){if(h.data.byteLength>g)throw new Error("No chunk may be larger than the first chunk of that message.");e.set(h.data,f),f+=h.data.length}return e.slice(0,f)}isOlderThan(d){const e=new Date().getTime()-this.lastUpdate;return e>d}get chunkCount(){return this.chunks.length}}class c{constructor(){this.chunks=new Map,this.onMessage=null}add(d){const e=new c(d);if(!(this.chunks.has(e.id)&&this.chunks.get(e.id).hasSerial(e.serial))){if(e.isEndOfMessage&&0==e.serial)return this.notifyListener(e.data),void this.chunks.delete(e.id);let f;this.chunks.has(e.id)?f=this.chunks.get(e.id):(f=new c,this.chunks.set(e.id,f)),f.addChunk(e),f.isComplete&&(this.notifyListener(f.merge()),this.chunks.delete(e.id))}}notifyListener(d){null!=this.onMessage&&this.onMessage(d)}gc(d){let e=0;for(let f of this.chunks){const g=f[0],h=f[1];h.isOlderThan(d)&&(e+=h.chunkCount,this.chunks.delete(g))}return e}}exports.Unchunker=c;

},{"./common":2}]},{},[3])(3)
});